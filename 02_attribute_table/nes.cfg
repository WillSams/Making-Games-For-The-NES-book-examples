MEMORY {
    ZP: 		start = $0000, size = $0100, type = rw, define = yes;
    STACK:      start = $0100, size = $0500, type = rw; # defines external symbols __STACK_START_, __STACK_SIZE_, __STACK_LAST_, __STACK_FILEOFFS_
    RAM:		start = $0300, size = $0500, define = yes;

    # NES Cartridge Header
    HEADER: start = $0000, size = $0010, type = ro, fill = yes, fillval = $00;

    # Program Banks
    PRG: start = $8000, size = $8000, type = ro, fill = yes, fillval = $FF;

    # Character Banks
    CHR: start = $0000, size = $2000, type = ro, fill = yes, fillval = $00;

    # Audio samples using the APU's delta modulation channel
    DMC: 		start = $ffc0, size = $003a, file = %O, fill = yes;
}

SEGMENTS {

    INESHDR:   load = HEADER,        type = ro, align = $10;
    STARTUP:  load = PRG,            type = ro,  define = yes;
    LOWCODE:  load = PRG,            type = ro,                optional = yes;
    INIT:     load = PRG,            type = ro,  define = yes, optional = yes;
    ONCE:     load = PRG,            type = ro,  define = yes, optional = yes;
    CODE:     load = PRG,            type = ro,  define = yes, align = $100;
    RODATA:   load = PRG,            type = ro,  define = yes, align = $100;
    DATA:     load = PRG, run = RAM, type = rw,  define = yes;
    VECTORS:  load = PRG, type = ro,  start = $FFFA;
    SAMPLES:  load = DMC,            type = rw;
    CHARS:    load = CHR,            type = ro, align = 16;
    BSS:      load = RAM,            type = bss, define = yes, align = $100;
    HEAP:     load = RAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,             type = zp;
}

FEATURES {

    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
