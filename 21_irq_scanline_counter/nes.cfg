MEMORY {
    ZP: 		start = $0000, size = $0100, type = rw, define = yes;
    RAM:		start = $0300, size = $0500, define = yes;

     # 4 pages; defines external symbols __STACK_START_, __STACK_SIZE_, __STACK_LAST_, __STACK_FILEOFFS_
    STACK:      start = $0100, size = $0500, type = rw;

    # NES Cartridge Header
    HEADER:     start = $0000, size = $0010, type = ro, fill = yes, fillval = $00;

    # Program Banks - thanks to https://github.com/gutomaia/NES_bankswitch_example/blob/master/nes.cfg
    # 3 16K ROM Banks @ $8000
    PRG0: start = $8000, size = $2000, fill = yes, define = yes;
    PRG1: start = $8000, size = $2000, fill = yes, define = yes;
    PRG2: start = $8000, size = $2000, fill = yes, define = yes;

    # 3 16K ROM Banks @ $a000
    PRG3: start = $a000, size = $2000, fill = yes, define = yes;
    PRG4: start = $a000, size = $2000, fill = yes, define = yes;
    PRG5: start = $a000, size = $2000, fill = yes, define = yes;

    # fixed 16K ROM banks @ $c000
    PRG6: start = $c000, size = $2000, fill = yes, define = yes;

    # final bank has
    # - startup
    # - code
    # - vectors
    PRG7:    start = $E000, size = $2000, fill = yes, define = yes;

    # Character Banks
    CHR:        start = $0000, size = $2000, type = ro, fill = yes, fillval = $00;

    # Audio samples using the APU's delta modulation channel
    DMC: 		start = $ffc0, size = $003a, file = %O, fill = yes;
}

SEGMENTS {
    INESHDR:    load = HEADER,              type = ro;
    STARTUP:    load = PRG6,                 type = ro,  define = yes;
    LOWCODE:    load = PRG6,                 type = ro,                optional = yes;
    INIT:       load = PRG6,                 type = ro,  define = yes, optional = yes;
    ONCE:       load = PRG6,                 type = ro,  define = yes, optional = yes;
    CODE:       load = PRG7,                 type = ro,  define = yes;
    CODE0:       load = PRG0,                 type = ro,  define = yes;
    CODE1:       load = PRG1,                 type = ro,  define = yes;
    CODE2:       load = PRG2,                 type = ro,  define = yes;
    CODE3:       load = PRG3,                 type = ro,  define = yes;
    CODE4:       load = PRG4,                 type = ro,  define = yes;
    CODE5:       load = PRG5,                 type = ro,  define = yes;
    CODE6:       load = PRG6,                 type = ro,  define = yes;
    RODATA:     load = PRG6,                 type = ro,  define = yes;
    DATA:       load = PRG6,   run = RAM,    type = rw,  define = yes;
    VECTORS:    load = PRG7,                 type = ro,  start = $FFFA;
    SAMPLES:    load = DMC,                 type = rw;
    CHARS:      load = CHR,                 type = ro;
    BSS:        load = RAM,                 type = bss, define = yes;
    HEAP:       load = RAM,                 type = bss, optional = yes;
    ZEROPAGE:   load = ZP,                  type = zp;
}

FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}
